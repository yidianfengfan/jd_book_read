现在python2.6新增了一个特性，只要把环境变量“PYTHONDONTWRITEBYTECODE”设置为“x”，就不再会生成.pyc文件了。在windows下修改环境变量的方法是：右键点击“我的电脑” ->属性->高级->环境变量。在Linux下可以修改~/.profile。

filter  [e for e in li if odd(e)]
map     [double(n) for n in li]
moduleNames = ['sys', 'os', 're', 'unittest']
modules = map(__import__, moduleNames)

 
#!/usr/bin/env python
# -*- coding: UTF-8 -*-

(1).__class__ is int  type(1) is int 
str1 is str2 (java ==),  str1 == str2(java equals) 
a = ";".join(["%s=%s" % (k, v) for k, v in {'a':'a','b':'b','c':'c'}.items()])
if __name__ == "__main__":
	test_info()

type, str, dir
callable 函数，它接收任何对象作为参数，如果参数对象是可调用的那么返回 True，否则返回 False。可调用对象包括函数、类方法，甚至类自身
li = ["Larry", "Curly"]
getattr(li, "append")("Moe") 
[elem for elem in li if li.count(elem) == 1]

a and b ==> 从左到右哪个假返回哪个， 要不返回最后一个
1 and a or b === if 1 a or b

(lambda x: x*2)(3)  == g = lambda x: x*2 g(3)

from UserDict import UserDict 被导入模块 types 的属性和方法被直接导入到局部名字空间去了，所以它们可以直接使用，而不需要加上模块名的限定
import UserDict  
有选择地导入某些属性和方法.. 
尽量少用 from module import * ，因为判定一个特殊的函数或属性是从哪来的有些困难，并且会造成调试和重构都更困难。


__init__ 方法是可选的，但是一旦你定义了，就必须记得显示调用父类的 __init__ 方法（如果它定义了的话）。这样更是正确的：无论何时子类想扩展父类的行为，后代方法必须在适当的时机，使用适当的参数，显式调用父类方法。

如果一个 Python 函数，类方法，或属性的名字以两个下划线开始（但不是结束），它是私有的；


# Bind the name getpass to the appropriate function
  try:
      import termios, TERMIOS                     1
  except ImportError:
      try:
          import msvcrt                           2
      except ImportError:
          try:
              from EasyDialogs import AskPassword 3
          except ImportError:
              getpass = default_getpass           4
          else:                                   5
              getpass = AskPassword
      else:
          getpass = win_getpass
  else:
      getpass = unix_getpass
  finally:
      if !f.closed
	f.close()

========File util
(shortname, extension) = os.path.splitext(filename)	
(filepath, filename) = os.path.split("c:\\music\\ap\\mahadeva.mp3")
os.listdir("c:\\music\\_singles\\") 
os.path.expanduser("~")  
[f for f in os.listdir(dirname) if os.path.isdir(os.path.join(dirname, f))]
glob.glob('/b*')

phonePattern = re.compile(r'^(\d{3})-(\d{3})-(\d{4})$')
phonePattern.search('800-555-1212').groups()

========HTML sgmllib
# 子类化 SGMLParser 来创建从 HTML 文档中抽取感兴趣的数据的类。start_a(self, attrs): href = [v for k, v in attrs if k=='href'] 
# 子类化 SGMLParser 来创建 BaseHTMLProcessor，它覆盖了所有8个处理方法，然后使用它们从片段中重建原始的 HTML。
# 子类化 BaseHTMLProcessor 来创建 Dialectizer，它增加了一些方法，专门用来处理指定的 HTML 标记，然后覆盖了 handle_data 方法，提供了用来处理 HTML 标记之间文本块的框架。
# 子类化 Dialectizer 来创建定义了文本处理规则的类。这些规则被 Dialectizer.handle_data 使用
sock = urllib.urlopen("http://diveintopython.org/")


(
     lambda word: re.search('[sxz]$', word),
     lambda word: re.sub('$', 'es', word)
    )
rules = ((ac, ap), (bc, bp))
for r, p in rules:
	if ac(cond):
		return ap(cond)


#strcpy(sStr1,sStr2) str1 = str2
#strcat(sStr1,sStr2) str1 +=str2
#strchr(sStr1,sStr2) str1.index(str2)
#strcmp(sStr1,sStr2) cmp(str1, str2)
#strspn(sStr1,sStr2) len(sStr1 and sStr2)
#strlen(sStr1)       len(str1)
#strlwr(sStr1)		str1.upper()
#strncat(sStr1,sStr2,n)	str1 + str2[0:n]
#strncmp(sStr1,sStr2,n)	cmp(sStr1[0:n],sStr2[0:n])
#strncpy(sStr1,sStr2,n) sStr1 = sStr2[0:n]
#strnset(sStr1,ch,n)	sStr1 = n * ch + sStr1[3:]
#strrev(sStr1)		sStr1 = sStr1[::-1]
#strstr(sStr1,sStr2)	sStr1.find(sStr2)
################list
sample_list = ['a',1,('a','b')]
value_start = sample_list[0]
end_value = sample_list[-1]
del sample_list[0]
sample_list[0:0] = ['sample value']
list_length = len(sample_list)
num_list = range(30)
initial_value = 0
list_length = 5
sample_list = [ initial_value for i in range(10)]
sample_list = [initial_value]*list_length
####################directory
d = { 'a': 1, 'b':2 }
#
dict((v,k) for k, v in map.iteritems())

#####################charset
#use chardet
import chardet
chardet.detect(rawdata)
##{'confidence': 0.98999999999999999, 'encoding': 'GB2312'}

#encode, decode
#isinstance(s, str) 用来判断是否为一般字符串
#isinstance(s, unicode) 用来判断是否为unicode 

def u(s, encoding):
    if isinstance(s, unicode):
        return s
    else:
        return unicode(s, encoding)

def strQ2B(ustring):
    """把字符串全角转半角"""
    rstring = ""
    for uchar in ustring:
        inside_code=ord(uchar)
        if inside_code==0x3000:
            inside_code=0x0020
        else:
            inside_code-=0xfee0
        if inside_code<0x0020 or inside_code>0x7e:      #转完之后不是半角字符返回原来的字符
            rstring += uchar
        rstring += unichr(inside_code)
    return rstring

    def strB2Q(ustring):
    """把字符串半角转全角"""
    rstring = ""
    for uchar in ustring:
        inside_code=ord(uchar)
        if inside_code<0x0020 or inside_code>0x7e:      #不是半角字符就返回原来的字符
            rstring += uchar
        if inside_code==0x0020: #除了空格其他的全角半角的公式为:半角=全角-0xfee0
            inside_code=0x3000
        else:
            inside_code+=0xfee0
        rstring += unichr(inside_code)
    return rstring

    #Python比较字符串大小时，根据的是ord函数得到的编码值

    #变量函数
def foo():
 print 'hi'
t = eval('foo')
t()

dict(a=1,b=2,c=3)


#############yield
不像一般的函数会生成值后退出，生成器函数在生成值后会自动挂起并暂停他们的执行和状态，他的本地变量将保存状态信息，这些信息在函数恢复时将再度有效
>>> def g(n):
...     for i in range(n):
...             yield i **2
...
>>> for i in g(5):
...     print i,":",
...
0 : 1 : 4 : 9 : 16 :
>>> t = g(5)
>>> t.next()
0
>>> t.next()
1
>>> t.next()
4
>>> t.next()
9
>>> t.next()
16
>>> t.next()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
StopIteration


在函数式编程里面， 我们可以定义匿名函数，也可以把函数赋值给一个变量或作为参数传递给另外一个函数，Python语言很早就支持函数式编程，我们可以用lambda关键字定义一个匿名函数，然后赋值给一个变量，如下所示：
>>> f=lambda(n):n**2
>>> f(6)
36

>>> f=lambda(n):lambda(m):n*m
>>> g=f(5) #相当与g=lambda(m):5*m
>>> g(9) #相当于5*9
45

lambda定义的匿名函数可以引用外围函数的变量，上面的代码中，第二个lambda表达式定义的匿名函数引用了第一个匿名函数的参数n,因为第一个匿名函数是第二个匿名函数的外围函数。
除了lambda表达式之外，python还支持将函数作为参数传递给另外一个函数，有点类似于C语言中的函数指针，python语言内建的函数filter,map,reduce就可以接受函数参数。filter(function, sequence)会遍历sequence中的每一个item,并以该item为参数调用function,如果function返回ture,就将该item加到结果sequence中，这就达到过滤sequence的效果，作为参数的function就是过滤的条件，例子如下：
>>> a=range(1,10)
>>> filter(lambda(n):n%2==0,a)
[2, 4, 6, 8]
这里用lambda定义的匿名函数来定义过滤条件，在list a中返回是偶数的items

map(function, sequence)也是遍历sequence中的每一个item,并以该item为参数调用function，然后将执行结果添加到最终的结果sequence中，例子如下：
>>> b=range(1,10)
>>> map(lambda(n):n**2,b)
[1, 4, 9, 16, 25, 36, 49, 64, 81]

reduce(function, sequence)先把sequence中的头两个item作为参数传给function,将function的运行结果跟第三个item作为参数再次传给function，直至遍历完sequence,最后把单个值返回，例子如下：
>>> def add(x,y):
    return x+y

>>> reduce(add,range(1,10))
45
 

Python代码  收藏代码

s = []
for i in seq:
  s.append(foo(i))

 

推荐代码:
Python代码  收藏代码
s = map(foo, seq)
更高效的代码
for i in itertools.imap(foo, seq):
  bar(i)

 劣化代码:
Python代码  收藏代码
for i in xrange(len(seq1)):
  foo(seq1[i], seq2[i])

 推荐代码:
Python代码  收藏代码
for i, j in zip(seq1, seq2)
  foo(i, j)
更高效：
for i, j in itertools.izip(seq1, seq2): 
  foo(i, j)

 劣化代码:
Python代码  收藏代码

   1. for i in xrange(len(seq)):  
   2.   foo(seq[i], i）  

for i in xrange(len(seq)):
  foo(seq[i], i）

 推荐代码：
Python代码  收藏代码

   1. for i, item in enumerate(seq):  
   2.   foo(item, i)  

for i, item in enumerate(seq):
  foo(item, i)

 

 劣化代码:
Python代码  收藏代码

   1. s = seq[:]  
   2. s.reverse()  
   3. for i in s:  
   4.   foo(i)  

s = seq[:]
s.reverse()
for i in s:
  foo(i)

推荐代码：
Java代码  收藏代码

   1. for i in reversed(s):  
   2.   foo(i)  

for i in reversed(s):
  foo(i)

 劣化代码:
Python代码  收藏代码

   1. def foo(seq, bgn, end):   
   2.   i=0  
   3.   while(bgn < end): bar(seq[bgn], i )  
   4.     bgn += 1  
   5.     i += 1   
   6. def foo(seq, bgn, end):  
   7.    tmp_seq = seq[bgn:end]   
   8.    for i, item in enumerate(tmp_seq):  
   9.      bar(item, i)  

def foo(seq, bgn, end): 
  i=0
  while(bgn < end): bar(seq[bgn], i )
    bgn += 1
    i += 1 
def foo(seq, bgn, end):
   tmp_seq = seq[bgn:end] 
   for i, item in enumerate(tmp_seq):
     bar(item, i)

 推荐代码：
Python代码  收藏代码

   1. def foo(seq, bgn, end):  
   2.   for begin, i in itertools.izip(xrange(bgn, end), itertools.counter()):  
   3.     bar(seq[begin], i)  

def foo(seq, bgn, end):
  for begin, i in itertools.izip(xrange(bgn, end), itertools.counter()):
    bar(seq[begin], i)

  劣化代码:
Java代码  收藏代码

   1. for i in seq:  
   2.   if pred(i):   
   3.     foo(i)  

for i in seq:
  if pred(i): 
    foo(i)

 推荐代码：
Java代码  收藏代码

   1. for i in itertools.ifilter(pred, seq):  
   2.   foo(i)  

for i in itertools.ifilter(pred, seq):
  foo(i)

如果你又更好的方案，请继续补吧。

==================coding
#coding: utf-8
a = '我们'  a.decode('gbk').encode('utf8')
if in file set coding='utf8', should do  a.decode('utf8')
主要看文件的编码,用bottle向后台传递时, a.decode('gbk').
urllib.urlencode(params)


