--install
aptitude install python-django

django-amdin startproject django_example

django_example/
    __init__.py  		#
    manage.py			#A command-line utility that lets you interact with this Django project in various way.
    settings.py			#Settings/configuration for this Django projec
    urls.py			#The URL declarations for this Django project; a "table of contents" of your Django-powered site.


---run server
python manage.py runserver 127.0.0.1 8000

edit db config in settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'mysql', # Add 'postgresql_psycopg2', 'postgresql', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'test',                      # Or path to database file if using sqlite3.
        'USER': 'root',                      # Not used with sqlite3.
        'PASSWORD': 'root',                  # Not used with sqlite3.
        'HOST': '127.0.0.1',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '3306',                      # Set to empty string for default. Not used with sqlite3.
    }
}
python manage.py syncdb #install apps data to dbs(auth, contenttypes, sessions, sites, messages,staticfiles)

---create app(models)
python manage.py startapp users

add models.py:

add users to settings.py
INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'users'
)

查看生成的sql:
python manage.py sql users
also can use :valite, sqlcustom users, sqlclear users, sqlindexes users, sqlall users

sync models to db:
python manage.py syncdb

--现在可用shell 来操作model
python manage.py shell
from users.models import Poll, Choice # Import the model classes we just wrote.
Poll.objects.all()
import datetime
p = Poll(question="What's up?", pub_date=datetime.datetime.now())
p.save()
p.id
p.pub_date = datetime.datetime(2007, 4, 1, 0, 0)
p.save()
Poll.objects.all()

Poll.objects.filter(id=1) #filter(question_startswith='s')
#get(pub_date_year=2007) 
#get(pk=1)

p.choice_set.create(choice='Not much', votes=0)
p.choice_set.all()
p.choice_set.count()
c = Choice.objects.filter(poll__pub_date__year=2007)
c.delete()




注：django中采用__unicode__(self)来代表__str__前台返回的是unicode string, 
--add admin app to site:
1. add 'django.contrib.admin' to INSTALLED_APPS setting
2. python manage.py syncdb
3. add admin urls to urls
4. start server: python manager.py runserver
5. visit: http://127.0.0.1:8080/admin/
6. add your app to admin:
   in you app add admin.py:
from users.models import Poll
from django.contrib import admin
from users.models import Choice

#can extends: admin.TabularInline
class ChoiceInline(admin.StackedInline):
	model = Choice
	extra = 1


class PollAdmin(admin.ModelAdmin):

	fieldsets = [
	            (None,               {'fields': ['question']}),
	            ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
	]

	list_display = ('question', 'pub_date', 'was_published_today')
	inlines = [ChoiceInline]
	list_filter = ['pub_date']
	search_fields = ['question']
	date_hierarchy = 'pub_date'

admin.site.register(Poll, PollAdmin)
admin.site.register(Choice)



--urls.py  (regular expression, Python callback function [, optional dictionary])
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    (r'^users/', include('users.urls')),
    (r'^admin/', include(admin.site.urls)),
)

users urls.py like this:
from django.conf.urls.defaults import *

urlpatterns = patterns('users.views',
    (r'^$', 'index'),
    (r'^(?P<poll_id>\d+)/$', 'detail'),
    (r'^(?P<poll_id>\d+)/results/$', 'results'),
    (r'^(?P<poll_id>\d+)/vote/$', 'vote'),
)

should add method in users:

views.py:
from django.template import Context, loader
from users.models import Poll
from django.http import HttpResponse

def index(request):
    latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5]
    t = loader.get_template('users/index.html')
    c = Context({
        'latest_poll_list': latest_poll_list,
    })
    return HttpResponse(t.render(c))

def detail(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    return render_to_response('users/detail.html', {'poll': p})


# return render_to_response('users/index.html', {'latest_poll_list': latest_poll_list})


--template like:
{% if latest_poll_list %}
    <ul>
    {% for poll in latest_poll_list %}
        <li><a href="/users/{{ poll.id }}/">{{ poll.question }}</a></li>
    {% endfor %}
    </ul>
{% else %}
    <p>No users are available.</p>
{% endif %}





